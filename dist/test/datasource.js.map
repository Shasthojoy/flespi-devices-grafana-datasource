{"version":3,"sources":["../../src/datasource.js"],"names":["FlespiDevicesDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","undefined","url","uri","headers","token","name","q","param","target","device_ids","multiple_devices","indexOf","devices","split","i","length","device","push","substring","lastIndexOf","join","devices_reg","metricFindQuery","parameter","multiple_params","replace","options","query","buildQueryParameters","targets","filter","t","hide","Promise","resolve","data","from","parseInt","Date","parse","range","to","interval_sec","scopedVars","__interval_ms","value","prepareDeviceIds","parameters","prepareParameters","request_params","fields","func","maxDataPoints","gen_interval","generalize","method","doRequest","JSON","stringify","then","messages","response","result","createMultipleDevicesTimeseries","createSingleDeviceTimeseries","dict","message","timestamp","is_skip_param","device_id","device_label","datapoints","status","title","catch","error","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","res","device_name","label","id","text","errors","methos","params_set","telemetry","endsWith","_","map","d","isObject","datasourceRequest","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class FlespiDevicesDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData != undefined) {\n      this.url = instanceSettings.jsonData.uri;\n      this.headers = {'Authorization': 'FlespiToken ' + instanceSettings.jsonData.token, 'Content-Type': 'application/json'};\n    } else {\n      this.url = \"\";\n      this.headers = {};\n    }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  is_skip_param(param) {\n    switch(param) {\n      case \"channel_id\":\n      case \"device_id\":\n      case \"ident\":\n      case \"device_name\":\n      case \"timestamp\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  prepareDeviceIds(target) {\n    let device_ids = \"all\";\n    if (target == \"$device\" || target == \"all\") {\n      device_ids = \"all\";\n      this.multiple_devices = true;\n    } else if (target.indexOf(',') !== -1) {\n      // multiple devices\n      const devices = target.split(',');\n      device_ids = [];\n      for (let i = 0; i < devices.length; i++) {\n        const device = devices[i];\n        device_ids.push(device.substring(device.lastIndexOf('#') + 1));\n      }\n      device_ids = device_ids.join(',');\n      this.multiple_devices = true;\n    } else {\n      // single device\n      device_ids = target.substring(target.lastIndexOf('#') + 1);\n      this.multiple_devices = false;\n    }\n    if (this.devices_reg == undefined) {\n      this.metricFindQuery(\"devices\");\n    }\n    return device_ids;\n  }\n\n  prepareParameters(parameter) {\n    if (parameter === \"select parameter\" || parameter === \"all\") {\n      // will return all messages by default\n      this.multiple_params = true;\n      return null;\n    }\n    if (parameter.indexOf(',') !== -1 || parameter.indexOf('*') !== -1) {\n      // comma-separated list or wildcard parameters\n      this.multiple_params = true;\n    } else {\n      // single parameter\n      this.multiple_params = false;\n    }\n    if (parameter.indexOf('#') !== -1) {\n      // urlescape # in parameter name\n      parameter = parameter.replace(/#/g, '%23');\n    }\n    return parameter;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets == null || query.targets.length <= 0 || !query.targets[0].target) {\n      return Promise.resolve({data: []});\n    }\n\n    // prepare params of request\n    const from = parseInt(Date.parse(query.range.from) / 1000);\n    const to = parseInt(Date.parse(query.range.to) / 1000);\n    const interval_sec = query.scopedVars.__interval_ms.value / 1000\n    const device_ids = this.prepareDeviceIds(query.targets[0].target);\n    const parameters = this.prepareParameters(query.targets[0].parameter);\n    if (this.multiple_devices === true && this.multiple_params === true) {\n      // attempt to show multiple parameters for multiple devices on one plot, don't process it\n      return Promise.resolve({data: []});\n    }\n    const request_params = {from: from, to : to}\n    if (parameters !== null) {\n      request_params.fields = parameters + \",timestamp,device_id\";\n      if (parameters.indexOf('*') === -1) {\n        request_params.filter = parameters;\n      }\n    }\n\n  if (query.targets[0].func != undefined && query.targets[0].func != '') {\n    if (interval_sec >= 60 || (interval_sec !== 0 && query.maxDataPoints > 0 && ((to - from)/interval_sec > query.maxDataPoints))) {\n        // apply generalization function\n        const gen_interval = (to - from)/query.maxDataPoints;\n        request_params.generalize = gen_interval >= 60 ? parseInt(gen_interval) : 60;\n        if (query.targets[0].func == \"avg\") {\n            request_params.method = \"average\";\n        } else if (query.targets[0].func == \"max\") {\n            request_params.method = \"maximum\";\n        } else {\n            request_params.method = \"minimum\";\n        }\n    }\n  }\n    return this.doRequest({\n      url: this.url + '/gw/devices/' + device_ids + '/messages?data=' + JSON.stringify(request_params),\n      method: 'GET'\n    }).then(response => {\n      // parse response: convert device messages to timeseries\n      const messages = response.data.result;\n      if (!messages || messages.length == 0) {\n        // empty response - no data points\n        return {data: []};\n      }\n      if (this.multiple_devices === true) {\n        return this.createMultipleDevicesTimeseries(messages);\n      } else {\n        return this.createSingleDeviceTimeseries(messages);\n      }\n    });\n  }\n\n  createMultipleDevicesTimeseries(messages) {\n    // mutiple devices, but only one parameter\n    const data = [];\n    const dict = {};\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      const timestamp = message.timestamp;\n      for (let param in message) {\n        if (this.is_skip_param(param) === true) {\n          continue;\n        }\n        let value = message[param];\n        if (typeof value == \"boolean\") {\n          value = (value == true) ? 1 : 0;\n        }\n        if (typeof value != \"number\") {\n          continue;\n        }\n        const device_id = message.device_id;\n        if (device_id == undefined || device_id == null || this.devices_reg == undefined || this.devices_reg[device_id] == undefined) {\n          return {data: []};    // unknown device - return empty datapoints\n        }\n        const device_label = this.devices_reg[device_id];\n        if (!dict[device_label]) {\n          // create separate datapoints array for each device\n          dict[device_label] = {\n              datapoints: []\n          }\n        }\n        dict[device_label].datapoints.push([value, timestamp * 1000]);\n      }\n    }\n    // format parameters dictionary to timeseries\n    for (let device_label in dict) {\n      data.push({\n          target: device_label,\n          datapoints: dict[device_label].datapoints\n      });\n    }\n    return {data: data};\n  }\n\n  createSingleDeviceTimeseries(messages) {\n    // only one device, but can contain multiple parameters\n    const data = [];\n    const dict = {};\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      const timestamp = message.timestamp;\n      for (let param in message) {\n        if (this.is_skip_param(param) === true) {\n          continue;\n        }\n        let value = message[param];\n        if (typeof value == \"boolean\") {\n          value = (value == true) ? 1 : 0;\n        }\n        if (typeof value != \"number\") {\n          continue;\n        }\n        if (!dict[param]) {\n          // create separate dataapoints array for each parameter\n          dict[param] = {\n              datapoints: []\n          }\n        }\n        dict[param].datapoints.push([value, timestamp * 1000]);\n      }\n    }\n    // format parameters dictionary to timeseries\n    for (let param in dict) {\n      data.push({\n          target: param,                      // target: parameter.name\n          datapoints: dict[param].datapoints  // datapoints: array of [value, timestamp]\n      });\n    }\n    return {data: data};\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/gw/devices/all',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      if (error.status === 401) {\n        return { status: \"error\", message: \"Invalid or expired access token\" };\n      } else {\n        return { status: \"error\", message: \"Request error, code:\" + error.status };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    let query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    let annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    query = this.templateSrv.replace(query, null, 'csv');\n    if (query === \"devices\") {\n      return this.doRequest({\n        url: this.url + '/gw/devices/all',\n        method: 'GET',\n      }).then(response => {\n        const devices_reg = {};     // devices registry, contains device_id: label fields\n        const res = [];\n        const data = response.data.result;\n        for (let i = 0; i < data.length; i++) {\n            let device_name = data[i].name;\n            if (device_name.indexOf(',') !== -1) {\n              device_name = device_name.replace(/,/g, '');\n            }\n            const label = device_name + ' #' + data[i].id;\n            devices_reg[data[i].id] = label;\n            res.push({value: label, text: label});\n        }\n        this.devices_reg = devices_reg;\n        return res;\n      }).catch(error => {\n        if (error.status === 401) {\n          throw {\n            message: \"Invalid or expired access token\",\n            error: error.data.errors[0],\n          };\n        }\n        throw error;\n      });\n    } else if (query === \"parameters\") {\n      // get all parameters of all devices\n      return this.doRequest({\n        url: this.url + '/gw/devices/all?fields=telemetry',\n        methos: 'GET',\n      }).then(response => {\n        const params_set = [];\n        const data = response.data.result;\n        for (let i = 0; i < data.length; i++) {\n          const telemetry = data[i].telemetry;\n          for (let param in telemetry) {\n            if (this.is_skip_param(param) === true) {\n              continue;\n            }\n            if (typeof telemetry[param].value != \"number\" && typeof telemetry[param].value != \"boolean\") {\n              // only numeric and boolean parameters are allowed for visualization\n              continue;\n            }\n            if (params_set.indexOf(param) == -1) {\n              // store new param\n              params_set.push(param);\n            }\n          }\n        }\n        const res = [];\n        for (let i = 0; i < params_set.length; i++) {\n          const param = params_set[i];\n          res.push({value: param, text: param});\n        }\n        return res;\n      }).catch(error => {\n        if (error.status === 401) {\n          throw {\n            message: \"Invalid or expired access token\",\n            error: error.data.errors[0],\n          };\n        }\n        throw error;\n      });\n    } else if (query.endsWith(\".parameters\")) {\n      // get parameters of the selected devices\n      const devices = query.replace('.parameters', '');\n      const device_ids = this.prepareDeviceIds(devices);\n\n      return this.doRequest({\n        url: this.url + '/gw/devices/' + device_ids + '?fields=telemetry',\n        methos: 'GET',\n      }).then(response => {\n        const params_set = [];\n        const data = response.data.result;\n        for (let i = 0; i < data.length; i++) {\n          const telemetry = data[i].telemetry;\n          for (let param in telemetry) {\n            if (this.is_skip_param(param) === true) {\n              continue;\n            }\n            if (typeof telemetry[param].value != \"number\" && typeof telemetry[param].value != \"boolean\") {\n              // only numeric and boolean parameters are allowed for visualization\n              continue;\n            }\n            if (params_set.indexOf(param) == -1) {\n              // store new param\n              params_set.push(param);\n            }\n          }\n        }\n        const res = [];\n        for (let i = 0; i < params_set.length; i++) {\n          const param = params_set[i];\n          res.push({value: param, text: param});\n        }\n        return res;\n      }).catch(error => {\n        if (error.status === 401) {\n          throw {\n            message: \"Invalid or expired access token\",\n            error: error.data.errors[0],\n          };\n        }\n        throw error;\n      });\n    }\n    // empty result for incorrect query\n    return Promise.resolve([]);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    // remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select device';\n    });\n\n    let targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'csv'),\n        parameter: this.templateSrv.replace(target.parameter, options.scopedVars, 'csv'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        func: this.templateSrv.replace(target.func)\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n}\n"]}