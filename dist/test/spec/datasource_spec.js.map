{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","Q","backendSrv","templateSrv","ds","Datasource","it","done","query","targets","then","result","expect","data","to","have","length","mapToTextValue","text","equal","value","a","b"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('GenericDatasource', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q = Q;\n        ctx.backendSrv = {};\n        ctx.templateSrv = {};\n        ctx.ds = new Datasource({}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n    });\n\n    it('should return an empty array when no targets are set', function(done) {\n        ctx.ds.query({targets: []}).then(function(result) {\n            expect(result.data).to.have.length(0);\n            done();\n        });\n    });\n\n    it ('should return data as text and as value', function(done) {\n        var result = ctx.ds.mapToTextValue({data: [\"zero\", \"one\", \"two\"]});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('zero');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('one');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('two');\n        done();\n    });\n\n    it ('should return text as text and value as value', function(done) {\n        var data = [\n            {text: \"zero\", value: \"value_0\"},\n            {text: \"one\", value: \"value_1\"},\n            {text: \"two\", value: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('value_0');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('value_1');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('value_2');\n        done();\n    });\n\n    it ('should return data as text and index as value', function(done) {\n        var data = [\n            {a: \"zero\", b: \"value_0\"},\n            {a: \"one\", b: \"value_1\"},\n            {a: \"two\", b: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal(data[0]);\n        expect(result[0].value).to.equal(0);\n        expect(result[1].text).to.equal(data[1]);\n        expect(result[1].value).to.equal(1);\n        expect(result[2].text).to.equal(data[2]);\n        expect(result[2].value).to.equal(2);\n        done();\n    });\n});\n"]}