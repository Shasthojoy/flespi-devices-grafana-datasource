{"version":3,"sources":["../src/datasource.js"],"names":["_","FlespiDevicesDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","undefined","url","uri","headers","token","name","q","param","target","device_ids","multiple_devices","indexOf","devices","split","i","length","device","push","substring","lastIndexOf","join","devices_reg","metricFindQuery","parameter","multiple_params","options","query","buildQueryParameters","targets","filter","t","hide","when","data","from","parseInt","Date","parse","range","to","interval_sec","scopedVars","__interval_ms","value","prepareDeviceIds","parameters","prepareParameters","request_params","fields","func","maxDataPoints","gen_interval","generalize","method","doRequest","JSON","stringify","then","messages","response","result","createMultipleDevicesTimeseries","createSingleDeviceTimeseries","dict","message","timestamp","is_skip_param","device_id","device_label","datapoints","status","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","res","device_name","label","id","text","methos","params_set","telemetry","map","d","isObject","datasourceRequest","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;yCAEMC,uB;AAEX,yCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,cAAIJ,iBAAiBK,QAAjB,IAA6BC,SAAjC,EAA4C;AAC1C,iBAAKC,GAAL,GAAWP,iBAAiBK,QAAjB,CAA0BG,GAArC;AACA,iBAAKC,OAAL,GAAe,EAAC,iBAAiB,iBAAiBT,iBAAiBK,QAAjB,CAA0BK,KAA7D,EAAoE,gBAAgB,kBAApF,EAAf;AACD,WAHD,MAGO;AACL,iBAAKH,GAAL,GAAW,EAAX;AACA,iBAAKE,OAAL,GAAe,EAAf;AACD;AACD,eAAKE,IAAL,GAAYX,iBAAiBW,IAA7B;AACA,eAAKC,CAAL,GAASX,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;wCAEaU,K,EAAO;AACnB,oBAAOA,KAAP;AACE,mBAAK,YAAL;AACA,mBAAK,WAAL;AACA,mBAAK,OAAL;AACA,mBAAK,aAAL;AACA,mBAAK,WAAL;AACE,uBAAO,IAAP;AACF;AACE,uBAAO,KAAP;AARJ;AAUD;;;2CAEgBC,M,EAAQ;AACvB,gBAAIA,UAAU,SAAV,IAAuBA,UAAU,KAArC,EAA4C;AAC1C,mBAAKC,UAAL,GAAkB,KAAlB;AACA,mBAAKC,gBAAL,GAAwB,IAAxB;AACD,aAHD,MAGO,IAAIF,OAAOG,OAAP,CAAe,GAAf,MAAwB,CAAC,CAA7B,EAAgC;AACrC;AACA,kBAAIC,UAAUJ,OAAOK,KAAP,CAAa,GAAb,CAAd;AACA,kBAAIJ,aAAa,EAAjB;AACA,mBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIF,QAAQG,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,oBAAIE,SAASJ,QAAQE,CAAR,CAAb;AACAL,2BAAWQ,IAAX,CAAgBD,OAAOE,SAAP,CAAiBF,OAAOG,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAhB;AACD;AACD,mBAAKV,UAAL,GAAkBA,WAAWW,IAAX,CAAgB,GAAhB,CAAlB;AACA,mBAAKV,gBAAL,GAAwB,IAAxB;AACD,aAVM,MAUA;AACL;AACA,mBAAKD,UAAL,GAAkBD,OAAOU,SAAP,CAAiBV,OAAOW,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAlB;AACA,mBAAKT,gBAAL,GAAwB,KAAxB;AACD;AACD,gBAAI,KAAKW,WAAL,IAAoBrB,SAAxB,EAAmC;AACjC,mBAAKsB,eAAL,CAAqB,SAArB;AACD;AACD,mBAAO,KAAKb,UAAZ;AACD;;;4CAEiBc,S,EAAW;AAC3B,gBAAIA,cAAc,kBAAd,IAAoCA,cAAc,KAAtD,EAA6D;AAC3D;AACA,mBAAKC,eAAL,GAAuB,IAAvB;AACA,qBAAO,IAAP;AACD;AACD,gBAAID,UAAUZ,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAA5B,IAAiCY,UAAUZ,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAjE,EAAoE;AAClE;AACA,mBAAKa,eAAL,GAAuB,IAAvB;AACD,aAHD,MAGO;AACL;AACA,mBAAKA,eAAL,GAAuB,KAAvB;AACD;AACD,mBAAOD,YAAY,sBAAnB;AACD;;;gCAEKE,O,EAAS;AAAA;;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,IAAiB,IAAjB,IAAyBF,MAAME,OAAN,CAAcb,MAAd,IAAwB,CAAjD,IAAsD,CAACW,MAAME,OAAN,CAAc,CAAd,EAAiBpB,MAA5E,EAAoF;AAClF,qBAAO,KAAKF,CAAL,CAAO0B,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED;AACA,gBAAIC,OAAOC,SAASC,KAAKC,KAAL,CAAWX,MAAMY,KAAN,CAAYJ,IAAvB,IAA+B,IAAxC,CAAX;AACA,gBAAIK,KAAKJ,SAASC,KAAKC,KAAL,CAAWX,MAAMY,KAAN,CAAYC,EAAvB,IAA6B,IAAtC,CAAT;AACA,gBAAIC,eAAed,MAAMe,UAAN,CAAiBC,aAAjB,CAA+BC,KAA/B,GAAuC,IAA1D;AACA,gBAAIlC,aAAa,KAAKmC,gBAAL,CAAsBlB,MAAME,OAAN,CAAc,CAAd,EAAiBpB,MAAvC,CAAjB;AACA,gBAAIqC,aAAa,KAAKC,iBAAL,CAAuBpB,MAAME,OAAN,CAAc,CAAd,EAAiBL,SAAxC,CAAjB;AACA,gBAAI,KAAKb,gBAAL,KAA0B,IAA1B,IAAkC,KAAKc,eAAL,KAAyB,IAA/D,EAAqE;AACnE;AACA,qBAAO,KAAKlB,CAAL,CAAO0B,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;AACD,gBAAIc,iBAAiB,EAACb,MAAMA,IAAP,EAAaK,IAAKA,EAAlB,EAArB;AACA,gBAAIM,eAAe,IAAnB,EAAyB;AACvBE,6BAAeC,MAAf,GAAwBH,UAAxB;AACD;;AAEH,gBAAInB,MAAME,OAAN,CAAc,CAAd,EAAiBqB,IAAjB,IAAyBjD,SAAzB,IAAsC0B,MAAME,OAAN,CAAc,CAAd,EAAiBqB,IAAjB,IAAyB,EAAnE,EAAuE;AACrE,kBAAIT,gBAAgB,EAAhB,IAAuBA,iBAAiB,CAAjB,IAAsBd,MAAMwB,aAAN,GAAsB,CAA5C,IAAkD,CAACX,KAAKL,IAAN,IAAYM,YAAZ,GAA2Bd,MAAMwB,aAA9G,EAA+H;AAC3H;AACA,oBAAIC,eAAe,CAACZ,KAAKL,IAAN,IAAYR,MAAMwB,aAArC;AACAH,+BAAeK,UAAf,GAA4BD,gBAAgB,EAAhB,GAAqBhB,SAASgB,YAAT,CAArB,GAA8C,EAA1E;AACA,oBAAIzB,MAAME,OAAN,CAAc,CAAd,EAAiBqB,IAAjB,IAAyB,KAA7B,EAAoC;AAChCF,iCAAeM,MAAf,GAAwB,SAAxB;AACH,iBAFD,MAEO,IAAI3B,MAAME,OAAN,CAAc,CAAd,EAAiBqB,IAAjB,IAAyB,KAA7B,EAAoC;AACvCF,iCAAeM,MAAf,GAAwB,SAAxB;AACH,iBAFM,MAEA;AACHN,iCAAeM,MAAf,GAAwB,SAAxB;AACH;AACJ;AACF;AACC,mBAAO,KAAKC,SAAL,CAAe;AACpBrD,mBAAK,KAAKA,GAAL,GAAW,cAAX,GAA4BQ,UAA5B,GAAyC,iBAAzC,GAA6D8C,KAAKC,SAAL,CAAeT,cAAf,CAD9C;AAEpBM,sBAAQ;AAFY,aAAf,EAGJI,IAHI,CAGC,oBAAY;AAClB;AACA,kBAAIC,WAAWC,SAAS1B,IAAT,CAAc2B,MAA7B;AACA,kBAAI,CAACF,QAAD,IAAaA,SAAS3C,MAAT,IAAmB,CAApC,EAAuC;AACrC;AACA,uBAAO,EAACkB,MAAM,EAAP,EAAP;AACD;AACD,kBAAI,MAAKvB,gBAAL,KAA0B,IAA9B,EAAoC;AAClC,uBAAO,MAAKmD,+BAAL,CAAqCH,QAArC,CAAP;AACD,eAFD,MAEO;AACL,uBAAO,MAAKI,4BAAL,CAAkCJ,QAAlC,CAAP;AACD;AACF,aAfM,CAAP;AAgBD;;;0DAE+BA,Q,EAAU;AACxC;AACA,gBAAIzB,OAAO,EAAX;AACA,gBAAI8B,OAAO,EAAX;AACA,iBAAK,IAAIjD,IAAI,CAAb,EAAgBA,IAAI4C,SAAS3C,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,kBAAIkD,UAAUN,SAAS5C,CAAT,CAAd;AACA,kBAAImD,YAAYD,QAAQC,SAAxB;AACA,mBAAK,IAAI1D,KAAT,IAAkByD,OAAlB,EAA2B;AACzB,oBAAI,KAAKE,aAAL,CAAmB3D,KAAnB,MAA8B,IAAlC,EAAwC;AACtC;AACD;AACD,oBAAIoC,QAAQqB,QAAQzD,KAAR,CAAZ;AACA,oBAAI,OAAOoC,KAAP,IAAgB,QAApB,EAA8B;AAC5B;AACD;AACD,oBAAIwB,YAAYH,QAAQG,SAAxB;AACA,oBAAIA,aAAanE,SAAb,IAA0BmE,aAAa,IAAvC,IAA+C,KAAK9C,WAAL,IAAoBrB,SAAnE,IAAgF,KAAKqB,WAAL,CAAiB8C,SAAjB,KAA+BnE,SAAnH,EAA8H;AAC5H,yBAAO,EAACiC,MAAM,EAAP,EAAP,CAD4H,CACtG;AACvB;AACD,oBAAImC,eAAe,KAAK/C,WAAL,CAAiB8C,SAAjB,CAAnB;AACA,oBAAI,CAACJ,KAAKK,YAAL,CAAL,EAAyB;AACvB;AACAL,uBAAKK,YAAL,IAAqB;AACjBC,gCAAY;AADK,mBAArB;AAGD;AACDN,qBAAKK,YAAL,EAAmBC,UAAnB,CAA8BpD,IAA9B,CAAmC,CAAC0B,KAAD,EAAQsB,YAAY,IAApB,CAAnC;AACD;AACF;AACD;AACA,iBAAK,IAAIG,YAAT,IAAyBL,IAAzB,EAA+B;AAC7B9B,mBAAKhB,IAAL,CAAU;AACNT,wBAAQ4D,YADF;AAENC,4BAAYN,KAAKK,YAAL,EAAmBC;AAFzB,eAAV;AAID;AACD,mBAAO,EAACpC,MAAMA,IAAP,EAAP;AACD;;;uDAE4ByB,Q,EAAU;AACrC;AACA,gBAAIzB,OAAO,EAAX;AACA,gBAAI8B,OAAO,EAAX;AACA,iBAAK,IAAIjD,IAAI,CAAb,EAAgBA,IAAI4C,SAAS3C,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,kBAAIkD,UAAUN,SAAS5C,CAAT,CAAd;AACA,kBAAImD,YAAYD,QAAQC,SAAxB;AACA,mBAAK,IAAI1D,KAAT,IAAkByD,OAAlB,EAA2B;AACzB,oBAAI,KAAKE,aAAL,CAAmB3D,KAAnB,MAA8B,IAAlC,EAAwC;AACtC;AACD;AACD,oBAAIoC,QAAQqB,QAAQzD,KAAR,CAAZ;AACA,oBAAI,OAAOoC,KAAP,IAAgB,QAApB,EAA8B;AAC5B;AACD;AACD,oBAAI,CAACoB,KAAKxD,KAAL,CAAL,EAAkB;AAChB;AACAwD,uBAAKxD,KAAL,IAAc;AACV8D,gCAAY;AADF,mBAAd;AAGD;AACDN,qBAAKxD,KAAL,EAAY8D,UAAZ,CAAuBpD,IAAvB,CAA4B,CAAC0B,KAAD,EAAQsB,YAAY,IAApB,CAA5B;AACD;AACF;AACD;AACA,iBAAK,IAAI1D,KAAT,IAAkBwD,IAAlB,EAAwB;AACtB9B,mBAAKhB,IAAL,CAAU;AACNT,wBAAQD,KADF,EAC8B;AACpC8D,4BAAYN,KAAKxD,KAAL,EAAY8D,UAFlB,CAE8B;AAF9B,eAAV;AAID;AACD,mBAAO,EAACpC,MAAMA,IAAP,EAAP;AACD;;;2CAEgB;AACf,mBAAO,KAAKqB,SAAL,CAAe;AACpBrD,mBAAK,KAAKA,GAAL,GAAW,iBADI;AAEpBoD,sBAAQ;AAFY,aAAf,EAGJI,IAHI,CAGC,oBAAY;AAClB,kBAAIE,SAASW,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBN,SAAS,wBAA9B,EAAwDO,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;0CAEe9C,O,EAAS;AACvB,gBAAIC,QAAQ,KAAK7B,WAAL,CAAiB2E,OAAjB,CAAyB/C,QAAQgD,UAAR,CAAmB/C,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,gBAAIgD,kBAAkB;AACpBpC,qBAAOb,QAAQa,KADK;AAEpBmC,0BAAY;AACVpE,sBAAMoB,QAAQgD,UAAR,CAAmBpE,IADf;AAEVsE,4BAAYlD,QAAQgD,UAAR,CAAmBE,UAFrB;AAGVC,wBAAQnD,QAAQgD,UAAR,CAAmBG,MAHjB;AAIVC,2BAAWpD,QAAQgD,UAAR,CAAmBI,SAJpB;AAKVnD,uBAAOA;AALG,eAFQ;AASpBoD,wBAAUrD,QAAQqD;AATE,aAAtB;;AAYA,mBAAO,KAAKxB,SAAL,CAAe;AACpBrD,mBAAK,KAAKA,GAAL,GAAW,cADI;AAEpBoD,sBAAQ,MAFY;AAGpBpB,oBAAMyC;AAHc,aAAf,EAIJjB,IAJI,CAIC,kBAAU;AAChB,qBAAOG,OAAO3B,IAAd;AACD,aANM,CAAP;AAOD;;;0CAEeP,K,EAAO;AAAA;;AACrBA,oBAAQ,KAAK7B,WAAL,CAAiB2E,OAAjB,CAAyB9C,KAAzB,EAAgC,IAAhC,EAAsC,MAAtC,CAAR;AACA,gBAAIA,SAAS,SAAb,EAAwB;AACtB,qBAAO,KAAK4B,SAAL,CAAe;AACpBrD,qBAAK,KAAKA,GAAL,GAAW,iBADI;AAEpBoD,wBAAQ;AAFY,eAAf,EAGJI,IAHI,CAGC,oBAAY;AAClB,oBAAMpC,cAAc,EAApB,CADkB,CACU;AAC5B,oBAAM0D,MAAM,EAAZ;AACA,oBAAM9C,OAAO0B,SAAS1B,IAAT,CAAc2B,MAA3B;AACA,qBAAK,IAAI9C,IAAI,CAAb,EAAgBA,IAAImB,KAAKlB,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,sBAAIkE,cAAc/C,KAAKnB,CAAL,EAAQT,IAA1B;AACA,sBAAI2E,YAAYrE,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAlC,EAAqC;AACnCqE,kCAAcA,YAAYR,OAAZ,CAAoB,IAApB,EAA0B,EAA1B,CAAd;AACD;AACD,sBAAIS,QAAQD,cAAc,IAAd,GAAqB/C,KAAKnB,CAAL,EAAQoE,EAAzC;AACA7D,8BAAYY,KAAKnB,CAAL,EAAQoE,EAApB,IAA0BD,KAA1B;AACAF,sBAAI9D,IAAJ,CAAS,EAAC0B,OAAOsC,KAAR,EAAeE,MAAMF,KAArB,EAAT;AACH;AACD,uBAAK5D,WAAL,GAAmBA,WAAnB;AACA,uBAAO0D,GAAP;AACD,eAlBM,CAAP;AAmBD,aApBD,MAoBO,IAAIrD,SAAS,YAAb,EAA2B;AAChC,kBAAIjB,aAAa,KAAjB;AACA,kBAAI,KAAKA,UAAL,KAAoBT,SAAxB,EAAmC;AACjCS,6BAAa,KAAKA,UAAlB;AACD;AACD,qBAAO,KAAK6C,SAAL,CAAe;AACpBrD,qBAAK,KAAKA,GAAL,GAAW,cAAX,GAA4BQ,UAA5B,GAAyC,mBAD1B;AAEpB2E,wBAAQ;AAFY,eAAf,EAGJ3B,IAHI,CAGC,oBAAY;AAClB,oBAAM4B,aAAa,EAAnB;AACA,oBAAMpD,OAAO0B,SAAS1B,IAAT,CAAc2B,MAA3B;AACA,qBAAK,IAAI9C,IAAI,CAAb,EAAgBA,IAAImB,KAAKlB,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,sBAAMwE,YAAYrD,KAAKnB,CAAL,EAAQwE,SAA1B;AACA,uBAAK,IAAI/E,KAAT,IAAkB+E,SAAlB,EAA6B;AAC3B,wBAAI,OAAKpB,aAAL,CAAmB3D,KAAnB,MAA8B,IAAlC,EAAwC;AACtC;AACD;AACD,wBAAI,OAAO+E,UAAU/E,KAAV,EAAiBoC,KAAxB,IAAiC,QAArC,EAA+C;AAC7C;AACD;AACD,wBAAI0C,WAAW1E,OAAX,CAAmBJ,KAAnB,KAA6B,CAAC,CAAlC,EAAqC;AACnC;AACA8E,iCAAWpE,IAAX,CAAgBV,KAAhB;AACD;AACF;AACF;AACD,oBAAMwE,MAAM,EAAZ;AACA,qBAAK,IAAIjE,IAAI,CAAb,EAAgBA,IAAIuE,WAAWtE,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,sBAAIP,QAAQ8E,WAAWvE,CAAX,CAAZ;AACAiE,sBAAI9D,IAAJ,CAAS,EAAC0B,OAAOpC,KAAR,EAAe4E,MAAM5E,KAArB,EAAT;AACD;AACD,uBAAOwE,GAAP;AACD,eA3BM,CAAP;AA4BD;AACF;;;yCAEcnB,M,EAAQ;AACrB,mBAAOpE,EAAE+F,GAAF,CAAM3B,OAAO3B,IAAb,EAAmB,UAACuD,CAAD,EAAI1E,CAAJ,EAAU;AAClC,kBAAI0E,KAAKA,EAAEL,IAAP,IAAeK,EAAE7C,KAArB,EAA4B;AAC1B,uBAAO,EAAEwC,MAAMK,EAAEL,IAAV,EAAgBxC,OAAO6C,EAAE7C,KAAzB,EAAP;AACD,eAFD,MAEO,IAAInD,EAAEiG,QAAF,CAAWD,CAAX,CAAJ,EAAmB;AACxB,uBAAO,EAAEL,MAAMK,CAAR,EAAW7C,OAAO7B,CAAlB,EAAP;AACD;AACD,qBAAO,EAAEqE,MAAMK,CAAR,EAAW7C,OAAO6C,CAAlB,EAAP;AACD,aAPM,CAAP;AAQD;;;oCAES/D,O,EAAS;AACjBA,oBAAQtB,OAAR,GAAkB,KAAKA,OAAvB;AACA,mBAAO,KAAKP,UAAL,CAAgB8F,iBAAhB,CAAkCjE,OAAlC,CAAP;AACD;;;+CAEoBA,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQG,OAAR,GAAkBpC,EAAEqC,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAOpB,OAAOA,MAAP,KAAkB,eAAzB;AACD,aAFiB,CAAlB;;AAIA,gBAAIoB,UAAUpC,EAAE+F,GAAF,CAAM9D,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLpB,wBAAQ,OAAKX,WAAL,CAAiB2E,OAAjB,CAAyBhE,OAAOA,MAAhC,EAAwCiB,QAAQgB,UAAhD,EAA4D,KAA5D,CADH;AAELlB,2BAAW,OAAK1B,WAAL,CAAiB2E,OAAjB,CAAyBhE,OAAOe,SAAhC,EAA2CE,QAAQgB,UAAnD,EAA+D,KAA/D,CAFN;AAGLkD,uBAAOnF,OAAOmF,KAHT;AAIL5D,sBAAMvB,OAAOuB,IAJR;AAKLjC,sBAAMU,OAAOV,IAAP,IAAe,WALhB;AAMLmD,sBAAM,OAAKpD,WAAL,CAAiB2E,OAAjB,CAAyBhE,OAAOyC,IAAhC;AAND,eAAP;AAQD,aATa,CAAd;;AAWAxB,oBAAQG,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOH,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class FlespiDevicesDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData != undefined) {\n      this.url = instanceSettings.jsonData.uri;\n      this.headers = {'Authorization': 'FlespiToken ' + instanceSettings.jsonData.token, 'Content-Type': 'application/json'};\n    } else {\n      this.url = \"\";\n      this.headers = {};\n    }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  is_skip_param(param) {\n    switch(param) {\n      case \"channel_id\":\n      case \"device_id\":\n      case \"ident\":\n      case \"device_name\":\n      case \"timestamp\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  prepareDeviceIds(target) {\n    if (target == \"$device\" || target == \"all\") {\n      this.device_ids = \"all\";\n      this.multiple_devices = true;\n    } else if (target.indexOf(',') !== -1) {\n      // multiple devices\n      var devices = target.split(',');\n      var device_ids = [];\n      for (var i = 0; i < devices.length; i++) {\n        var device = devices[i];\n        device_ids.push(device.substring(device.lastIndexOf('#') + 1));\n      }\n      this.device_ids = device_ids.join(',');\n      this.multiple_devices = true;\n    } else {\n      // single device\n      this.device_ids = target.substring(target.lastIndexOf('#') + 1);\n      this.multiple_devices = false;\n    }\n    if (this.devices_reg == undefined) {\n      this.metricFindQuery(\"devices\");\n    }\n    return this.device_ids;\n  }\n\n  prepareParameters(parameter) {\n    if (parameter === \"select parameter\" || parameter === \"all\") {\n      // will return all messages by default\n      this.multiple_params = true;\n      return null;\n    }\n    if (parameter.indexOf(',') !== -1 || parameter.indexOf('*') !== -1) {\n      // comma-separated list or wildcard parameters\n      this.multiple_params = true;\n    } else {\n      // single parameter\n      this.multiple_params = false;\n    }\n    return parameter + \",timestamp,device_id\";\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets == null || query.targets.length <= 0 || !query.targets[0].target) {\n      return this.q.when({data: []});\n    }\n\n    // prepare params of request\n    var from = parseInt(Date.parse(query.range.from) / 1000);\n    var to = parseInt(Date.parse(query.range.to) / 1000);\n    var interval_sec = query.scopedVars.__interval_ms.value / 1000\n    var device_ids = this.prepareDeviceIds(query.targets[0].target);\n    var parameters = this.prepareParameters(query.targets[0].parameter);\n    if (this.multiple_devices === true && this.multiple_params === true) {\n      // attempt to show multiple parameters for multiple devices on one plot, don't process it\n      return this.q.when({data: []});\n    }\n    var request_params = {from: from, to : to}\n    if (parameters !== null) {\n      request_params.fields = parameters;\n    }\n\n  if (query.targets[0].func != undefined && query.targets[0].func != '') {\n    if (interval_sec >= 60 || (interval_sec !== 0 && query.maxDataPoints > 0 && ((to - from)/interval_sec > query.maxDataPoints))) {\n        // apply generalization function\n        var gen_interval = (to - from)/query.maxDataPoints;\n        request_params.generalize = gen_interval >= 60 ? parseInt(gen_interval) : 60;\n        if (query.targets[0].func == \"avg\") {\n            request_params.method = \"average\";\n        } else if (query.targets[0].func == \"max\") {\n            request_params.method = \"maximum\";\n        } else {\n            request_params.method = \"minimum\";\n        }\n    }\n  }\n    return this.doRequest({\n      url: this.url + '/gw/devices/' + device_ids + '/messages?data=' + JSON.stringify(request_params),\n      method: 'GET'\n    }).then(response => {\n      // parse response: convert device messages to timeseries\n      var messages = response.data.result;\n      if (!messages || messages.length == 0) {\n        // empty response - no data points\n        return {data: []};\n      }\n      if (this.multiple_devices === true) {\n        return this.createMultipleDevicesTimeseries(messages);\n      } else {\n        return this.createSingleDeviceTimeseries(messages);\n      }\n    });\n  }\n\n  createMultipleDevicesTimeseries(messages) {\n    // mutiple devices, but only one parameter\n    var data = [];\n    var dict = {};\n    for (var i = 0; i < messages.length; i++) {\n      var message = messages[i];\n      var timestamp = message.timestamp;\n      for (var param in message) {\n        if (this.is_skip_param(param) === true) {\n          continue;\n        }\n        var value = message[param];\n        if (typeof value != \"number\") {\n          continue;\n        }\n        var device_id = message.device_id;\n        if (device_id == undefined || device_id == null || this.devices_reg == undefined || this.devices_reg[device_id] == undefined) {\n          return {data: []};    // unknown device - return empty datapoints\n        }\n        var device_label = this.devices_reg[device_id];\n        if (!dict[device_label]) {\n          // create separate datapoints array for each device\n          dict[device_label] = {\n              datapoints: []\n          }\n        }\n        dict[device_label].datapoints.push([value, timestamp * 1000]);\n      }\n    }\n    // format parameters dictionary to timeseries\n    for (var device_label in dict) {\n      data.push({\n          target: device_label,\n          datapoints: dict[device_label].datapoints\n      });\n    }\n    return {data: data};\n  }\n\n  createSingleDeviceTimeseries(messages) {\n    // only one device, but can contain multiple parameters\n    var data = [];\n    var dict = {};\n    for (var i = 0; i < messages.length; i++) {\n      var message = messages[i];\n      var timestamp = message.timestamp;\n      for (var param in message) {\n        if (this.is_skip_param(param) === true) {\n          continue;\n        }\n        var value = message[param];\n        if (typeof value != \"number\") {\n          continue;\n        }\n        if (!dict[param]) {\n          // create separate dataapoints array for each parameter\n          dict[param] = {\n              datapoints: []\n          }\n        }\n        dict[param].datapoints.push([value, timestamp * 1000]);\n      }\n    }\n    // format parameters dictionary to timeseries\n    for (var param in dict) {\n      data.push({\n          target: param,                      // target: parameter.name\n          datapoints: dict[param].datapoints  // datapoints: array of [value, timestamp]\n      });\n    }\n    return {data: data};\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/gw/devices/all',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    query = this.templateSrv.replace(query, null, 'glob');\n    if (query == \"devices\") {\n      return this.doRequest({\n        url: this.url + '/gw/devices/all',\n        method: 'GET',\n      }).then(response => {\n        const devices_reg = {};     // devices registry, contains device_id: label fields\n        const res = [];\n        const data = response.data.result;\n        for (var i = 0; i < data.length; i++) {\n            var device_name = data[i].name;\n            if (device_name.indexOf(',') !== -1) {\n              device_name = device_name.replace(/,/g, '');\n            }\n            var label = device_name + ' #' + data[i].id;\n            devices_reg[data[i].id] = label;\n            res.push({value: label, text: label});\n        }\n        this.devices_reg = devices_reg;\n        return res;\n      });\n    } else if (query == \"parameters\") {\n      var device_ids = \"all\";\n      if (this.device_ids !== undefined) {\n        device_ids = this.device_ids;\n      }\n      return this.doRequest({\n        url: this.url + '/gw/devices/' + device_ids + '?fields=telemetry',\n        methos: 'GET',\n      }).then(response => {\n        const params_set = [];\n        const data = response.data.result;\n        for (var i = 0; i < data.length; i++) {\n          const telemetry = data[i].telemetry;\n          for (var param in telemetry) {\n            if (this.is_skip_param(param) === true) {\n              continue;\n            }\n            if (typeof telemetry[param].value != \"number\") {\n              continue;\n            }\n            if (params_set.indexOf(param) == -1) {\n              // store new param\n              params_set.push(param);\n            }\n          }\n        }\n        const res = [];\n        for (var i = 0; i < params_set.length; i++) {\n          var param = params_set[i];\n          res.push({value: param, text: param});\n        }\n        return res;\n      })\n    }\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select device';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'csv'),\n        parameter: this.templateSrv.replace(target.parameter, options.scopedVars, 'csv'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        func: this.templateSrv.replace(target.func)\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n}\n"]}